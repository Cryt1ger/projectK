from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
import aiohttp
import asyncio
import matplotlib.pyplot as plt
import io
from datetime import datetime, timedelta
import os
from dotenv import load_dotenv

load_dotenv()

BOT_TOKEN = os.getenv('BOT_TOKEN')
WEATHER_API_KEY = os.getenv('WEATHER_API_KEY')


WEATHER_SERVICE_URL = "http://localhost:5000"
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)


class WeatherStates(StatesGroup):
    waiting_for_start_city = State()
    waiting_for_days = State()
    waiting_for_details = State()

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    welcome_text = """
üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Weather Route Bot!

–Ø –ø–æ–º–æ–≥—É –≤–∞–º —É–∑–Ω–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –ø–æ –º–∞—Ä—à—Ä—É—Ç—É –≤–∞—à–µ–≥–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è.

–ß—Ç–æ —è —É–º–µ—é:
‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –¥–ª—è —Ç–æ—á–µ–∫ –º–∞—Ä—à—Ä—É—Ç–∞
‚Ä¢ –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—å –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π
‚Ä¢ –û—Ç–æ–±—Ä–∞–∂–∞—Ç—å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É, –≤–µ—Ç–µ—Ä –∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Å–∞–¥–∫–æ–≤

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:...
/weather - –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã
/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
"""
    await message.answer(welcome_text)

@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    help_text = """
üìç –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/weather - –ó–∞–ø—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ

üå§ –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã:
1. –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /weather
2. –£–∫–∞–∂–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—ã–π –≥–æ—Ä–æ–¥
3. –£–∫–∞–∂–∏—Ç–µ –∫–æ–Ω–µ—á–Ω—ã–π –≥–æ—Ä–æ–¥
4. –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞
"""
    await message.answer(help_text)

@dp.message(Command("weather"))
async def cmd_weather(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥–∞ –º–∞—Ä—à—Ä—É—Ç–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ú–æ—Å–∫–≤–∞, –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥):")
    await state.set_state(WeatherStates.waiting_for_start_city)

@dp.message(WeatherStates.waiting_for_start_city)
async def process_start_city(message: types.Message, state: FSMContext):

    cities = [city.strip() for city in message.text.split(',')]
    
    if len(cities) < 2:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–∞–∫ –º–∏–Ω–∏–º—É–º 2 –≥–æ—Ä–æ–¥–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:")
        return
    

    await state.update_data(cities=cities)
    
    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [
                types.InlineKeyboardButton(text="1 –¥–µ–Ω—å", callback_data="days_1"),
                types.InlineKeyboardButton(text="2 –¥–Ω—è", callback_data="days_2"),
            ],
            [
                types.InlineKeyboardButton(text="3 –¥–Ω—è", callback_data="days_3"),
                types.InlineKeyboardButton(text="4 –¥–Ω—è", callback_data="days_4"),
            ]
        ]
    )
    
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞:", reply_markup=keyboard)
    await state.set_state(WeatherStates.waiting_for_days)

@dp.callback_query(lambda c: c.data.startswith('days_'))
async def process_days_selection(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    processing_msg = await callback.message.answer("‚è≥ –ü–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ...")
    
    user_data = await state.get_data()
    if 'cities' not in user_data:
        await callback.message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –æ –≥–æ—Ä–æ–¥–∞—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /weather"
        )
        await processing_msg.delete()
        await state.clear()
        return

    days = int(callback.data.split('_')[1])
    cities = user_data['cities']

    try:
        weather_data = {}
        async with aiohttp.ClientSession() as session:
            for city in cities:  # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ –≥–æ—Ä–æ–¥–∞
                api_key = WEATHER_API_KEY
                params = {
                    "q": city,
                    "appid": api_key,
                    "units": "metric",
                    "cnt": days * 8
                }
                
                async with session.get("http://api.openweathermap.org/data/2.5/forecast", params=params) as response:
                    if response.status != 200:
                        error_data = await response.json()
                        raise Exception(f"API Error for {city}: {error_data.get('message', 'Unknown error')}")
                    
                    data = await response.json()
                    weather_data[city] = {
                        'forecast': [
                            {
                                'date': item['dt_txt'],
                                'temp': item['main']['temp'],
                                'wind_speed': item['wind']['speed'],
                                'precipitation': item.get('pop', 0) * 100
                            }
                            for item in data['list']
                        ]
                    }

        plt.figure(figsize=(12, 6))
        for city, data in weather_data.items():
            dates = [datetime.strptime(d['date'], '%Y-%m-%d %H:%M:%S').strftime('%d.%m %H:%M') for d in data['forecast']]
            temps = [d['temp'] for d in data['forecast']]
            plt.plot(dates, temps, marker='o', label=city, markersize=4)

        plt.title('–ü—Ä–æ–≥–Ω–æ–∑ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã')
        plt.xlabel('–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è')
        plt.ylabel('–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (¬∞C)')
        plt.legend()
        plt.grid(True)
        plt.xticks(rotation=45)
        plt.tight_layout()

        buf = io.BytesIO()
        plt.savefig(buf, format='png')
        buf.seek(0)
        plt.close()

        await callback.message.answer_photo(
            types.BufferedInputFile(buf.getvalue(), filename="forecast.png"),
            caption="–ì—Ä–∞—Ñ–∏–∫ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä –ø–æ –º–∞—Ä—à—Ä—É—Ç—É"
        )

        for city, data in weather_data.items():
            daily_data = {}
            for item in data['forecast']:
                date = datetime.strptime(item['date'], '%Y-%m-%d %H:%M:%S').strftime('%Y-%m-%d')
                if date not in daily_data:
                    daily_data[date] = {
                        'temps': [],
                        'winds': [],
                        'precips': []
                    }
                daily_data[date]['temps'].append(item['temp'])
                daily_data[date]['winds'].append(item['wind_speed'])
                daily_data[date]['precips'].append(item['precipitation'])

            summary_text = f"üå§ –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –¥–ª—è {city}:\n\n"
            for date, values in daily_data.items():
                display_date = datetime.strptime(date, '%Y-%m-%d').strftime('%d.%m')
                avg_temp = sum(values['temps']) / len(values['temps'])
                avg_wind = sum(values['winds']) / len(values['winds'])
                max_precip = max(values['precips'])
                
                summary_text += (
                    f"üìÖ {display_date}\n"
                    f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {avg_temp:.1f}¬∞C\n"
                    f"üí® –í–µ—Ç–µ—Ä: {avg_wind:.1f} –º/—Å\n"
                    f"‚òîÔ∏è –û—Å–∞–¥–∫–∏: {max_precip:.0f}%\n\n"
                )

            keyboard = types.InlineKeyboardMarkup(
                inline_keyboard=[[
                    types.InlineKeyboardButton(
                        text="–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–≥–æ–¥—É —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏ –≤ —Ç—Ä–∏ —á–∞—Å–∞",
                        callback_data=f"detailed_{city}"
                    )
                ]]
            )
            
            await callback.message.answer(summary_text, reply_markup=keyboard)

        await state.update_data(weather_data=weather_data)
        await processing_msg.delete()
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {str(e)}")
        await processing_msg.delete()
        await callback.message.answer(
            f"üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞: {str(e)}\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–æ–≤ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )
    
    await state.set_state(WeatherStates.waiting_for_details)

@dp.callback_query(lambda c: c.data.startswith('detailed_'))
async def process_detailed_forecast(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    city = callback.data.split('_')[1]
    
    user_data = await state.get_data()
    weather_data = user_data.get('weather_data', {})
    
    if city not in weather_data:
        await callback.message.answer("–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø—Ä–æ—Å–∏—Ç–µ –ø—Ä–æ–≥–Ω–æ–∑ –∑–∞–Ω–æ–≤–æ.")
        return
    
    daily_forecast = {}
    for item in weather_data[city]['forecast']:
        date = datetime.strptime(item['date'], '%Y-%m-%d %H:%M:%S')
        day = date.strftime('%d.%m')
        if day not in daily_forecast:
            daily_forecast[day] = []
        daily_forecast[day].append(item)

    detailed_text = f"üå§ –ü–æ–¥—Ä–æ–±–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è {city}:\n\n"
    for day, items in daily_forecast.items():
        detailed_text += f"üìÖ {day}:\n"
        for item in items:
            time = datetime.strptime(item['date'], '%Y-%m-%d %H:%M:%S').strftime('%H:%M')
            detailed_text += (
                f"‚è∞ {time}\n"
                f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {item['temp']:.1f}¬∞C\n"
                f"üí® –í–µ—Ç–µ—Ä: {item['wind_speed']:.1f} –º/—Å\n"
                f"‚òîÔ∏è –û—Å–∞–¥–∫–∏: {item['precipitation']:.0f}%\n\n"
            )
    
    max_length = 4096
    for i in range(0, len(detailed_text), max_length):
        await callback.message.answer(detailed_text[i:i+max_length])

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())